openapi: 3.0.3
info:
  title: Subscriptions Service
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /health:
    get:
      summary: Liveness probe
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: ok

  /health/db:
    get:
      summary: DB health
      responses:
        '200':
          description: DB OK
        '503':
          description: DB down

  /subscriptions:
    get:
      summary: List subscriptions
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
        - in: query
          name: service_name
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
    post:
      summary: Create subscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDTO'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /subscriptions/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get subscription by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update subscription by id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDTO'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete subscription by id
      responses:
        '204':
          description: Deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /subscriptions/summary:
    get:
      summary: Sum of monthly costs within period
      parameters:
        - in: query
          name: from
          required: true
          schema:
            type: string
            pattern: '^[0-1][0-9]-[0-9]{4}$'
          description: MM-YYYY
        - in: query
          name: to
          required: true
          schema:
            type: string
            pattern: '^[0-1][0-9]-[0-9]{4}$'
          description: MM-YYYY
        - in: query
          name: user_id
          schema:
            type: string
            format: uuid
        - in: query
          name: service_name
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SummaryResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        service_name:
          type: string
        price:
          type: integer
          minimum: 0
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - service_name
        - price
        - start_date
        - created_at
        - updated_at

    CreateDTO:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        service_name:
          type: string
        price:
          type: integer
          minimum: 0
        start:
          type: string
          description: MM-YYYY
        end:
          type: string
          nullable: true
          description: MM-YYYY
      required:
        - user_id
        - service_name
        - price
        - start

    UpdateDTO:
      allOf:
        - $ref: '#/components/schemas/CreateDTO'

    SummaryResult:
      type: object
      properties:
        total:
          type: integer
      required:
        - total

    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'